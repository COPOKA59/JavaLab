package com.example.demo.viewmodels

import com.example.demo.model.CTimeInterval
import com.example.demo.services.CServiceTimeIntervals
import javafx.beans.property.SimpleBooleanProperty
import tornadofx.*

/****************************************************************************************************
 * Модель представления для списка самолётов.                                                       *
 * @author Макарова П.Ф. 26.03.2023                                                      *
 ****************************************************************************************************/
class CViewModelTimeIntervalsList                 : Controller()
{
    //Сервис с логикой для работы со списком временных промежутков.
    private val serviceTimeIntervals              : CServiceTimeIntervals by inject()

    //Список самолётов с возможность отслеживания изменений.
    val timeIntervals                            = serviceTimeIntervals.getAll()

    //Факт наличия выделения в таблице.
    //От него зависит активность некоторых кнопок.
    val elementSelected                       = SimpleBooleanProperty(false)

    /***********************************************************************************
     * Добавление пустой записи в таблицу.                                             *
     **********************************************************************************/
    fun add()
    {
        serviceTimeIntervals.add(CTimeInterval()) //Передача данных на сервер
    }

    /**************************************************************************************
     * Удаление записи из списка.                                                         *
     * @param item - элемент для удаления.                                                *
     *************************************************************************************/
    fun delete(item:CTimeInterval?)
    {
        //Если элемент не указан - ничего не делаем.
        item ?: return
        serviceTimeIntervals.delete(item) //Передача данных на сервер
    }

    /***********************************************************************************
     * Обработка изменения выделенных элементов в списке.                              *
     * @param selectedItem - выделенный элемент.                                       *
     **********************************************************************************/
    fun onSelectionChange(selectedItem:CTimeInterval?)
    {
        elementSelected.set(selectedItem != null)
    }

    /***************************************************************************************
     * Отправка всех текущих данных из списка на сервер.                                   *
     **************************************************************************************/
    fun saveAll()
    {
        serviceTimeIntervals.saveAll() //Передача команды на отправку данных на сервер
    }
}
